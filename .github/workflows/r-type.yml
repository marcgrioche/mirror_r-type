name: R-Type

env:
  MIRROR_URL: "git@github.com:EpitechPGE3-2025/G-CPP-500-TLS-5-1-rtype-6.git"
  MIRROR_REPO: "EpitechPGE3-2025/G-CPP-500-TLS-5-1-rtype-6"
  EXECUTABLES: "r-type_server,r-type_client"

on:
  push:
    branches-ignore:
      - 'ga-ignore-*'

jobs:

  check_program_compilation:
    if: ${{ github.repository }} != MIRROR_REPO
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker
    steps:
      - uses: actions/checkout@v4
      - name: Install CURL development package
        run: sudo apt-get update && sudo apt-get install -y libcurl4-openssl-dev
      - name: Cache CPM dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/cpm
          key: cpm-cache-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}
      - name: Configure and build with CMake
        run: |
          cmake -S . -B build
          cmake --build build
      - name: Verify executables
        run: |
          EXECUTABLE_LIST=$(echo "${{ env.EXECUTABLES }}" | tr ',' ' ')
          for EXECUTABLE in $EXECUTABLE_LIST; do
            if [ ! -x "build/$EXECUTABLE" ]; then
              echo "Failed to find $EXECUTABLE"
              exit 1
            fi
          done
      - name: Clean
        run: rm -rf build

  check_program_compilation_windows:
    if: ${{ github.repository }} != MIRROR_REPO
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install vcpkg and libcurl
        shell: powershell
        run: |
          git clone https://github.com/microsoft/vcpkg.git C:\vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat
          # install curl for MSVC x64; switch triplet if you build x86 or static libs
          C:\vcpkg\vcpkg.exe install curl[ssl]:x64-windows
          # export VCPKG_ROOT to subsequent steps
          "VCPKG_ROOT=C:\\vcpkg" | Out-File -FilePath $env:GITHUB_ENV -Encoding ASCII


      - name: Cache CPM dependencies
        uses: actions/cache@v4
        with:
          path: '%USERPROFILE%\.cache\cpm'
          key: cpm-cache-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}
      - name: Configure and build with CMake
        run: |
          cmake -S . -B build
          cmake --build build --config Release
      - name: Verify executables
        run: |
          $executables = "${{ env.EXECUTABLES }}" -split ","
          foreach ($executable in $executables) {
            $exePath = "build/Release/$executable.exe"
            if (!(Test-Path $exePath)) {
              Write-Host "Failed to find $exePath"
              exit 1
            }
          }
      - name: Clean
        run: Remove-Item -Recurse -Force build

  push_to_mirror:
    if: ${{ github.repository }} != MIRROR_REPO && ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Push to mirror
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
